{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "9e14ae76",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Importamos librerias\n",
    "import os\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from matplotlib.animation import PillowWriter\n",
    "\n",
    "def FARGO3DVisualize(data_path, file_range, output_file, fps, file_pattern):\n",
    "    '''\n",
    "    FARGO3DVisualize es una función que utiliza los datos de simulaciones generadas con el software de FARGO3D para\n",
    "    obtener visualizaciones de la simulación realizada.\n",
    "   \n",
    "    Argumentos de la función:\n",
    "    data_path (string): Path del directorio donde tengamos los datos de simulación.\n",
    "    file_range (tupla): Rango de cuántos outputs queremos leer de los que ha generado la simulación.\n",
    "    output_file (string): Este es el nombre del archivo que crearemos. Está en formato GIF.\n",
    "    fps (int): Los frames por segundo del gif generado. Predeterminadamente utiliza 15.\n",
    "    file_pattern (string): El código lee los outputs siguiendo un patrón en el nombre, para de esta forma detectar cuál de\n",
    "    todos los archivos le será de utilidad. Acá se coloca el patrón del nombre del archivo de la simulación que\n",
    "    queremos utilizar.\n",
    "   \n",
    "    Output:\n",
    "    El output de la función es una visualización en formato GIF de la simulación realizada por FARGO3D.\n",
    "    \n",
    "    #Ejemplo de uso\n",
    "    path = '/content/drive/MyDrive/Fargo3D/outputs/fargo' #Path\n",
    "    file_range = (1, 49)  # El rango de los datos\n",
    "    output_file = '/content/drive/MyDrive/Fargo3D/outputs/gasvy1.gif' #Dirección de guardado y nombre del archivo generado\n",
    "    fps = 20 # fps de la animación\n",
    "    file_pattern = \"gasvy\"  # Variable que queremos graficar\n",
    "    \n",
    "    \n",
    "    #Llamamos a la funcion con los fps que queramos:\n",
    "    FARGO3DVisualize(path, file_range, output_file, fps, file_pattern)\n",
    "    '''\n",
    "\n",
    "    #Coordenadas polares\n",
    "    phi = np.loadtxt(data_path + \"/domain_x.dat\")[:-1] #Usamos domain_x.dat para definir el ángulo\n",
    "    r = np.loadtxt(data_path + \"/domain_y.dat\")[3:-4] #Usamos domain_y.dat para definir el r\n",
    "    #[:-1] y [3:-4] es una notación que utiliza FARGO3D\n",
    "   \n",
    "    #Definimos variables con el largo del ángulo phi y el radio r que utilizaremos más adelante.\n",
    "    nphi = len(phi)\n",
    "    nr = len(r)\n",
    "\n",
    "    pattern = file_pattern+\"{}.dat\" #Generalizamos el código para que pueda leer cualquier archivo que termine en .dat\n",
    "\n",
    "    file_numbers = [] #Variable que guarda la cantidad de archivos que tenemos en el path según nuestro file_pattern\n",
    "    #Recorremos rango de valores que establecimos en el argumento dela función\n",
    "    for i in range(file_range[0], file_range[1] + 1): \n",
    "        file_path = data_path + \"/\" + pattern.format(i)\n",
    "        if os.path.isfile(file_path):\n",
    "            file_numbers.append(i)\n",
    "   \n",
    "    datos = [] \n",
    "\n",
    "    for i in file_numbers:\n",
    "        file_path = data_path + \"/\" + pattern.format(i)\n",
    "        datos.append(np.fromfile(file_path).reshape(nr, nphi))\n",
    "\n",
    "    print(\"Total frames:\", len(datos))\n",
    "\n",
    "    fig = plt.figure()\n",
    "\n",
    "    # Si no es especifican los fps se vuelve al default de 15\n",
    "    if fps is not None:\n",
    "        writer = PillowWriter(fps=int(fps)) #Creamos el objeto de PillowWriter\n",
    "    else:\n",
    "        writer = PillowWriter(fps=15)\n",
    "\n",
    "    try:\n",
    "        with writer.saving(fig, output_file, 100): #PillowWriter guarda cada frame (cada archivo .dat) en la figura\n",
    "            for i in range(len(datos)):\n",
    "                plt.imshow(datos[i])\n",
    "                plt.axis('off')  #Ocultar los ejes, esto se puede cambiar si queremos.\n",
    "                writer.grab_frame()\n",
    "\n",
    "        if len(writer._frames) == 0:\n",
    "            raise ValueError(\"No frames were added to the animation. Please check your data and file pattern.\")\n",
    "    \n",
    "    #Excepción en caso de que no hay frames para crear GIF\n",
    "    except IndexError: \n",
    "        print(\"Error occurred while generating GIF. Generating PNG instead.\")\n",
    "        output_file = os.path.splitext(output_file)[0] + \".png\"\n",
    "        if len(datos) > 0:\n",
    "            plt.imshow(datos[0])\n",
    "            plt.axis('off')\n",
    "            plt.savefig(output_file, bbox_inches='tight', pad_inches=0)\n",
    "            plt.close(fig)\n",
    "        else:\n",
    "            print(\"No frames available for PNG generation.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "bc4e2b1f",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
